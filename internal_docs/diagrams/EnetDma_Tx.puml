@startuml
'Enet DMA TX Sequence

skinparam sequenceParticipantPadding  60

skinparam note {
    BackgroundColor #FFFDD0
}

hide footbox

participant App  as "Application" order 1
participant Enet as "Enet"        order 2
participant Dma  as "Enet DMA"    order 3
participant Per  as "Enet Per"    order 4
participant Rm   as "RM Mod"      order 5

App   -> Enet           : <b>Enet_ioctl(</b>hEnet, ENET_RM_IOCTL_ALLOC_TX_CH_PEERID, prms<b>)</b>
note left               : Allocate TX channel
activate Enet
Enet  -> Per            : <b>EnetPer_ioctl(</b>hPer, cmd, prms<b>)</b>
activate Per
Per   -> Rm             : <b>EnetMod_ioctl(</b>hRm, cmd, prms<b>)</b>
activate Rm
Rm   --> Per            : status
deactivate Rm
Per  --> Enet           : status
deactivate Per
Enet --> App            : status
deactivate Enet

App   -> App            : Set txChPrms with TX channel\nnumber allocated from RM.

App   -> Dma            : <b>EnetDma_openTxCh(</b>txChPrms<b>)</b>
note left               : Open TX channel with\nallocated channel number
activate Dma
Dma  --> App            : hTxCh
deactivate Dma

App   -> Dma            : <b>EnetDma_enableTxEvent(</b>hTxCh<b>)</b>
note left               : Enable TX event/interrupt
activate Dma
Dma  --> App            : status
deactivate Dma

...

App   -> App            : Prepare txPktQ for transmission.\nPackets are allocated from app queue

App   -> Dma            : <b>EnetDma_submitTxReadyPktQ(</b>txPktQ<b>)</b>
note left               : Submit packets ready\nfor transmission
activate Dma
Dma  --> App            : status
deactivate Dma

...

Dma    -> App           : notifyCb()
note right              : TX event indicating that\npackets have been transmitted
activate App
App    -> Dma           : <b>EnetDma_retrieveTxDonePkt(</b>txPktQ<b>)</b>
note left               : Retrieve transmitted packets
activate Dma
Dma   --> App           : status
deactivate Dma

App    -> App           : Move packets from txPktQ\nback to app queue
deactivate Dmgggxsa
App   --> Dma

@enduml
