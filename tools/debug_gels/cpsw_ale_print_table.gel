/*
 *  Copyright (c) Texas Instruments Incorporated 2020
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#define uint32_t                unsigned int
#define WR_MEM_32(addr, data)   *(uint32_t*)(addr) = (uint32_t)(data)
#define RD_MEM_32(addr)         *(uint32_t*)(addr)

#define ALE_BASE_2G                0x4603E000
#define ALE_BASE_3G                0x0803E000
#define ALE_BASE_5G                0x0C03E000
#define ALE_BASE_9G                0x0C03E000

#define ALE_TBLCTL              0x020
#define ALE_TBLW2               0x034
#define ALE_TBLW1               0x038
#define ALE_TBLW0               0x03C

#define ALE_TABLE_DEPTH_2G         64
#define ALE_TABLE_DEPTH_3G         512
#define ALE_TABLE_DEPTH_5G         512
#define ALE_TABLE_DEPTH_9G         1024


#define ALE_ENTRY_EMTPY         0x0
#define ALE_ENTRY_ADDR          0x1
#define ALE_ENTRY_VLAN          0x2
#define ALE_ENTRY_VLAN_ADDR     0x3

menuitem "CPSW ALE Print Table"

show_ale_entry_multicast_2g(uint32_t index, uint32_t word0, uint32_t word1, uint32_t word2)
{
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut(" Entry %u - Multicast\n",,,,, index);
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut("PORT_MASK        = %x\n",,,,, (word2 >>  2) & 0x1FF);
    GEL_TextOut("SUPER            = %u\n",,,,, (word2 >>  1) & 0x1);
    GEL_TextOut("MCAST_FWD_STATE  = %u\n",,,,, (word1 >> 30) & 0x3);
    GEL_TextOut("ENTRY_TYPE       = %u\n",,,,, (word1 >> 28) & 0x3);
    GEL_TextOut("MULTICAST_ADDR   = %x %x\n",,,,, (word1 >>  0) & 0xFFFF, word0);
}

show_ale_entry_multicast_9g(uint32_t index, uint32_t word0, uint32_t word1, uint32_t word2)
{
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut(" Entry %u - Multicast\n",,,,, index);
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut("PORT_MASK        = %x\n",,,,, (word2 >>  2) & 0x1FF);
    GEL_TextOut("SUPER            = %u\n",,,,, (word2 >>  1) & 0x1);
    GEL_TextOut("MCAST IGNORE BITS= %u\n",,,,, (word2 >>  0) & 0x1);
    GEL_TextOut("MCAST_FWD_STATE  = %u\n",,,,, (word1 >> 30) & 0x3);
    GEL_TextOut("ENTRY_TYPE       = %u\n",,,,, (word1 >> 28) & 0x3);
    GEL_TextOut("MULTICAST_ADDR   = %x %x\n",,,,, (word1 >>  0) & 0xFFFF, word0);
}

show_ale_entry_vlan_multicast_2g(uint32_t index, uint32_t word0, uint32_t word1, uint32_t word2)
{
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut(" Entry %u - VLAN/Multicast\n",,,,, index);
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut("PORT_MASK        = %x\n",,,,, (word2 >>  2) & 0x1FF);
    GEL_TextOut("SUPER            = %u\n",,,,, (word2 >>  1) & 0x1);
    GEL_TextOut("MCAST_FWD_STATE  = %u\n",,,,, (word1 >> 30) & 0x3);
    GEL_TextOut("ENTRY_TYPE       = %u\n",,,,, (word1 >> 28) & 0x3);
    GEL_TextOut("VLAN_ID          = %u\n",,,,, (word1 >> 16) & 0xFFF);
    GEL_TextOut("MULTICAST_ADDR   = %x %x\n",,,,, (word1 >>  0) & 0xFFFF, word0);
}

show_ale_entry_vlan_multicast_9g(uint32_t index, uint32_t word0, uint32_t word1, uint32_t word2)
{
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut(" Entry %u - VLAN/Multicast\n",,,,, index);
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut("PORT_MASK        = %x\n",,,,, (word2 >>  2) & 0x1FF);
    GEL_TextOut("SUPER            = %u\n",,,,, (word2 >>  1) & 0x1);
    GEL_TextOut("MCAST_FWD_STATE  = %u\n",,,,, (word1 >> 30) & 0x3);
    GEL_TextOut("ENTRY_TYPE       = %u\n",,,,, (word1 >> 28) & 0x3);
    GEL_TextOut("VLAN_ID          = %u\n",,,,, (word1 >> 16) & 0xFFF);
    GEL_TextOut("MULTICAST_ADDR   = %x %x\n",,,,, (word1 >>  0) & 0xFFFF, word0);
}

show_ale_entry_unicast_2g(uint32_t index, uint32_t word0, uint32_t word1, uint32_t word2)
{
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut(" Entry %u - Unicast\n",,,,, index);
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut("PORT_NUMBER      = %u\n",,,,, (word2 >>  2) & 0x1FF);
    GEL_TextOut("BLOCK            = %u\n",,,,, (word2 >>  1) & 0x1);
    GEL_TextOut("SECURE           = %u\n",,,,, (word2 >>  0) & 0x1);
    GEL_TextOut("UNICAST_TYPE     = %u\n",,,,, (word1 >> 30) & 0x3);
    GEL_TextOut("ENTRY_TYPE       = %u\n",,,,, (word1 >> 28) & 0x3);
    GEL_TextOut("UNICAST_ADDR     = %x %x\n",,,,, (word1 >>  0) & 0xFFFF, word0);
}

show_ale_entry_unicast_9g(uint32_t index, uint32_t word0, uint32_t word1, uint32_t word2)
{
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut(" Entry %u - Unicast\n",,,,, index);
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut("TRUNK            = %u\n",,,,, (word2 >> 10) & 0x1);
    GEL_TextOut("PORT_NUMBER      = %u\n",,,,, (word2 >> 2) & 0xF);
    GEL_TextOut("BLOCK            = %u\n",,,,, (word2 >> 1) & 0x1);
    GEL_TextOut("SECURE           = %u\n",,,,, (word2 >> 0) & 0x1);
    GEL_TextOut("TOUCH            = %u\n",,,,, (word1 >> 31) & 0x1);
    GEL_TextOut("AGEABLE          = %u\n",,,,, (word1 >> 30) & 0x1);
    GEL_TextOut("ENTRY_TYPE       = %u\n",,,,, (word1 >> 28) & 0x3);
    GEL_TextOut("UNICAST_ADDR     = %x %x\n",,,,, (word1 >>  0) & 0xFFFF, word0);
}

show_ale_entry_oui_unicast_2g(uint32_t index, uint32_t word0, uint32_t word1, uint32_t word2)
{
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut(" Entry %u - OUI Unicast\n",,,,, index);
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut("UNICAST_TYPE     = %u\n",,,,, (word1 >> 30) & 0x3);
    GEL_TextOut("ENTRY_TYPE       = %u\n",,,,, (word1 >> 28) & 0x3);
    GEL_TextOut("UNICAST_OUI      = %x %x\n",,,,, (word1 >>  0) & 0xFFFF, (word0 >> 24) & 0xFF);
}

show_ale_entry_oui_unicast_9g(uint32_t index, uint32_t word0, uint32_t word1, uint32_t word2)
{
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut(" Entry %u - OUI Unicast\n",,,,, index);
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut("ENTRY_TYPE       = %u\n",,,,, (word1 >> 28) & 0x3);
    GEL_TextOut("UNICAST_OUI      = %x %x\n",,,,, (word1 >>  0) & 0xFFFF, (word0 >> 24) & 0xFF);
}

show_ale_entry_vlan_unicast_2g(uint32_t index, uint32_t word0, uint32_t word1, uint32_t word2)
{
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut(" Entry %u - VLAN/Unicast\n",,,,, index);
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut("PORT_NUMBER       = %u\n",,,,, (word2 >>  2) & 0x1FF);
    GEL_TextOut("BLOCK             = %u\n",,,,, (word2 >>  1) & 0x1);
    GEL_TextOut("SECURE            = %u\n",,,,, (word2 >>  0) & 0x1);
    GEL_TextOut("UNICAST_TYPE      = %u\n",,,,, (word1 >> 30) & 0x3);
    GEL_TextOut("ENTRY_TYPE        = %u\n",,,,, (word1 >> 28) & 0x3);
    GEL_TextOut("VLAN_ID           = %u\n",,,,, (word1 >> 16) & 0xFFF);
    GEL_TextOut("UNICAST_ADDR      = %x %x\n",,,,, (word1 >>  0) & 0xFFFF, word0);
}

show_ale_entry_vlan_unicast_9g(uint32_t index, uint32_t word0, uint32_t word1, uint32_t word2)
{
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut(" Entry %u - VLAN/Unicast\n",,,,, index);
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut("TRUNK             = %u\n",,,,, (word2 >> 10) & 0x1);
    GEL_TextOut("PORT_NUMBER       = %u\n",,,,, (word2 >> 2) & 0x1FF);
    GEL_TextOut("BLOCK             = %u\n",,,,, (word2 >> 1) & 0x1);
    GEL_TextOut("TOUCH             = %u\n",,,,, (word1 >> 31) & 0x1);
    GEL_TextOut("AGEABLE           = %u\n",,,,, (word1 >> 30) & 0x1);
    GEL_TextOut("SECURE            = %u\n",,,,, (word2 >> 0) & 0x1);
    GEL_TextOut("ENTRY_TYPE        = %u\n",,,,, (word1 >> 28) & 0x3);
    GEL_TextOut("VLAN_ID           = %u\n",,,,, (word1 >> 16) & 0xFFF);
    GEL_TextOut("UNICAST_ADDR      = %x %x\n",,,,, (word1 >> 0) & 0xFFFF, word0);
}

show_ale_entry_vlan_2g(uint32_t index, uint32_t word0, uint32_t word1, uint32_t word2)
{
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut(" Entry %u - VLAN\n",,,,, index);
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut("ENTRY_TYPE        = %u\n",,,,, (word1 >> 28) & 0x3);
    GEL_TextOut("VLAN_ID           = %u\n",,,,, (word1 >> 16) & 0xFFF);
    GEL_TextOut("FORCE_UNTAG_EG    = %u\n",,,,, (word0 >> 24) & 0x1FF);
    GEL_TextOut("REG_MCAST_FLOOD   = %u\n",,,,, (word0 >> 16) & 0x1FF);
    GEL_TextOut("UNREG_MCAST_FLOOD = %u\n",,,,, (word0 >>  8) & 0x1FF);
    GEL_TextOut("VLAN_MEMBER_LIST  = %u\n",,,,, (word0 >>  0) & 0x1FF);
}

show_ale_entry_vlan_inner_9g(uint32_t index, uint32_t word0, uint32_t word1, uint32_t word2)
{
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut(" Entry %u - VLAN INNER \n",,,,, index);
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut("ENTRY_TYPE        = %u\n",,,,, (word1 >> 28) & 0x3);
    GEL_TextOut("IVLAN_ID           = %u\n",,,,, (word1 >> 16) & 0xFFF);
    GEL_TextOut("NO FRAG           = %u\n",,,,, (word1 >> 15) & 0x1);
    GEL_TextOut("REG_MCAST_FLOOD   = %u\n",,,,, (word1 >> 4) & 0x1FF);
    GEL_TextOut("VLAN FWD Untagged Egress = %u\n",,,,,
                                ((word1 >> 0U) << 0x100) + (word0 >> 24) & 0x1FF);
    GEL_TextOut("LMT NEXT HDR      = %u\n",,,,, (word0 >> 23) & 0x1);
    GEL_TextOut("UNREG_MCAST_FLOOD = %u\n",,,,, (word0 >> 12) & 0x1FF);
    GEL_TextOut("VLAN_MEMBER_LIST  = %u\n",,,,, (word0 >>  0) & 0x1FF);
}

show_ale_entry_vlan_outer_9g(uint32_t index, uint32_t word0, uint32_t word1, uint32_t word2)
{
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut(" Entry %u - VLAN OUTER\n",,,,, index);
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut("ENTRY_TYPE        = %u\n",,,,, (word1 >> 28) & 0x3);
    GEL_TextOut("OVLAN_ID           = %u\n",,,,, (word1 >> 16) & 0xFFF);
    GEL_TextOut("NO FRAG           = %u\n",,,,, (word1 >> 15) & 0x1);
    GEL_TextOut("REG_MCAST_FLOOD   = %u\n",,,,, (word1 >> 4) & 0x1FF);
    GEL_TextOut("VLAN FWD Untagged Egress = %u\n",,,,,
                                ((word1 >> 0U) << 0x100) + (word0 >> 24) & 0x1FF);
    GEL_TextOut("LMT NEXT HDR      = %u\n",,,,, (word0 >> 23) & 0x1);
    GEL_TextOut("UNREG_MCAST_FLOOD = %u\n",,,,, (word0 >> 12) & 0x1FF);
    GEL_TextOut("VLAN_MEMBER_LIST  = %u\n",,,,, (word0 >>  0) & 0x1FF);
}

show_ale_entry_vlan_ethertype_9g(uint32_t index, uint32_t word0, uint32_t word1, uint32_t word2)
{
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut(" Entry %u - VLAN ETHERTYPE \n",,,,, index);
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut("ENTRY_TYPE        = %u\n",,,,, (word1 >> 28) & 0x3);
    GEL_TextOut("ETHERTYPE  = %u\n",,,,, (word0 >>  0) & 0xFFFF);
}

show_ale_entry_vlan_ip4_9g(uint32_t index, uint32_t word0, uint32_t word1, uint32_t word2)
{
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut(" Entry %u - VLAN IPV4 \n",,,,, index);
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut("IGNORE BITS       = %u\n",,,,, (word2 >> 1) & 0x1F);
    GEL_TextOut("ENTRY_TYPE        = %u\n",,,,, (word1 >> 28) & 0x3);
    GEL_TextOut("IPV4 ADDR  = %u\n",,,,, word0);
}

show_ale_entry_vlan_ip6_9g(uint32_t index, uint32_t word0, uint32_t word1, uint32_t word2)
{
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut(" Entry %u - VLAN IPV6 \n",,,,, index);
    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut("Understanding Gap hence not printing :(");
}

hotmenu cpsw_print_ale_table_2g()
{
    uint32_t word0, word1, word2;
    uint32_t type;
    int i;
    int baseAddr = ALE_BASE_2G;

    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut("-------CPSW2G ALE TABLE----------------------\n");
    GEL_TextOut("---------------------------------------------\n");

    for (i = 0; i < ALE_TABLE_DEPTH_2G; i++)
    {
        WR_MEM_32(baseAddr + ALE_TBLCTL, i);

        word0 = RD_MEM_32(baseAddr + ALE_TBLW0);
        word1 = RD_MEM_32(baseAddr + ALE_TBLW1);
        word2 = RD_MEM_32(baseAddr + ALE_TBLW2);

        if (0)
        {

            GEL_TextOut("WORD1  = %u\n",,,,, word0);
            GEL_TextOut("WORD1  = %u\n",,,,, word1);
            GEL_TextOut("WORD1  = %u\n",,,,, word2);
        }

        /* ENTRY_TYPE (bits 61:60) */
        type = (word1 >> 28) & 0x3;

        if (type == ALE_ENTRY_EMTPY) {
            //GEL_TextOut(" Entry %u - Empty\n",,,,, i);
        } else if (type == ALE_ENTRY_ADDR) {
            if ((word1 >> 8) & 0x1) {
                show_ale_entry_multicast_2g(i, word0, word1, word2);
//            } else if ((word1 >> 30) & 0x3) {
//                show_ale_entry_oui_unicast(i, word0, word1, word2);
            } else {
                show_ale_entry_unicast_2g(i, word0, word1, word2);
            }
        } else if (type == ALE_ENTRY_VLAN) {
            show_ale_entry_vlan_2g(i, word0, word1, word2);
        } else if (type == ALE_ENTRY_VLAN_ADDR) {
            if ((word1 >> 8) & 0x1) {
                show_ale_entry_vlan_multicast_2g(i, word0, word1, word2);
            } else {
                show_ale_entry_vlan_unicast_2g(i, word0, word1, word2);
            }
        }
    }

    GEL_TextOut("Completed analysis of %u ALE entries\n",,,,, i);
}

cpsw_print_ale_table_ng(numAleEntries, baseAddr)
{
    uint32_t word0, word1, word2;
    uint32_t type;
    uint32_t vlanEntryType;
    int i;


    GEL_TextOut("---------------------------------------------\n");
    GEL_TextOut("-------CPSWnG ALE TABLE----------------------\n");
    GEL_TextOut("---------------------------------------------\n");
    for (i = 0; i < numAleEntries; i++)
    {
        WR_MEM_32(baseAddr + ALE_TBLCTL, i);

        word0 = RD_MEM_32(baseAddr + ALE_TBLW0);
        word1 = RD_MEM_32(baseAddr + ALE_TBLW1);
        word2 = RD_MEM_32(baseAddr + ALE_TBLW2);

        if (0)
        {
            GEL_TextOut("WORD0  = %x\n",,,,, word0);
            GEL_TextOut("WORD1  = %x\n",,,,, word1);
            GEL_TextOut("WORD2  = %x\n",,,,, word2);
        }

        /* ENTRY_TYPE (bits 61:60) */
        type = (word1 >> 28) & 0x3;

        if (type == ALE_ENTRY_EMTPY)
        {
            //GEL_TextOut(" Entry %u - Empty\n",,,,, i);
        }
        else if (type == ALE_ENTRY_ADDR)
        {
            if ((word1 >> 8) & 0x1)
            {
                show_ale_entry_multicast_9g(i, word0, word1, word2);
            }
            else if ( ((word1 >> 30) & 0x3) == 0x2 )
            {
               show_ale_entry_oui_unicast_9g(i, word0, word1, word2);
            }
            else
            {
                show_ale_entry_unicast_9g(i, word0, word1, word2);
            }
        }
        else if (type == ALE_ENTRY_VLAN)
        {
            vlanEntryType = ((word1 >> 30) & 0x3);
            vlanEntryType |= ((word2 >> 0) & 0x1);

            if ( 0x0 == vlanEntryType)
            {
                show_ale_entry_vlan_inner_9g(i, word0, word1, word2);
            }
            else if ( 0x2 == vlanEntryType)
            {
                show_ale_entry_vlan_outer_9g(i, word0, word1, word2);
            }
            else if ( 0x4 == vlanEntryType)
            {
                show_ale_entry_vlan_ethertype_9g(i, word0, word1, word2);
            }
            else if ( 0x6 == vlanEntryType )
            {
                show_ale_entry_vlan_ip4_9g(i, word0, word1, word2);
            }
            else if ((word1 >> 30) & 0x1)
            {
                show_ale_entry_vlan_ip6_9g(i, word0, word1, word2);
            }

        }
        else if (type == ALE_ENTRY_VLAN_ADDR)
        {
            if ((word1 >> 8) & 0x1)
            {
                show_ale_entry_vlan_multicast_9g(i, word0, word1, word2);
            }
            else {
                show_ale_entry_vlan_unicast_9g(i, word0, word1, word2);
            }
        }
    }

    GEL_TextOut("Completed analysis of %u ALE entries\n",,,,, i);
}

hotmenu cpsw_print_ale_table_3g()
{
    cpsw_print_ale_table_ng(ALE_TABLE_DEPTH_3G, ALE_BASE_3G);
}

hotmenu cpsw_print_ale_table_5g()
{
    cpsw_print_ale_table_ng(ALE_TABLE_DEPTH_5G, ALE_BASE_5G);
}

hotmenu cpsw_print_ale_table_9g()
{
    cpsw_print_ale_table_ng(ALE_TABLE_DEPTH_9G, ALE_BASE_9G);
}
