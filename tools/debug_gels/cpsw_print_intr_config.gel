/*
 *  Copyright (c) Texas Instruments Incorporated 2020
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#define uint32                    unsigned int
#define VIM_BASE_ADDR                  0x40F80000
#define VIM_RD(offset)            (*(uint32 *)(VIM_BASE_ADDR + offset))

menuitem "CPSW VIM"

cpsw_vim_print_group(uint32 offset, uint32 index)
{
    GEL_TextOut("-------------- GRP %d --------------\n",,,,, index);

    GEL_TextOut("RAW          = %x\n",,,,, VIM_RD(offset + 0x00));
    GEL_TextOut("STS          = %x\n",,,,, VIM_RD(offset + 0x04));
    GEL_TextOut("INTR_EN_SET  = %x\n",,,,, VIM_RD(offset + 0x08));
    GEL_TextOut("INTR_EN_CLR  = %x\n",,,,, VIM_RD(offset + 0x0c));
    GEL_TextOut("IRQSTS       = %x\n",,,,, VIM_RD(offset + 0x10));
    GEL_TextOut("FIQSTS       = %x\n",,,,, VIM_RD(offset + 0x14));
    GEL_TextOut("INTMAP       = %x\n",,,,, VIM_RD(offset + 0x18));
    GEL_TextOut("INTTYPE      = %x\n",,,,, VIM_RD(offset + 0x1c));
}

hotmenu cpsw_vim_print_intr()
{
    uint32 offset = 0x1000;
    uint32 i;

    GEL_TextOut("\n--------------- PRI ----------------\n");
    for (i = 0; i < 1024; i++)
    {
        GEL_TextOut("PRI %d     = %x\n",,,,, i, VIM_RD(offset));
        offset += 0x04;
    }
}

hotmenu cpsw_vim_print_vec(uint32 offset)
{
    uint32 offset = 0x2000;
    uint32 i;

    GEL_TextOut("\n--------------- VEC ----------------\n");
    for (i = 0; i < 1024; i++)
    {
        GEL_TextOut("VEC %d     = %x\n",,,,, i, VIM_RD(offset));
        offset += 0x04;
    }
}

hotmenu cpsw_vim_print_vim()
{
    uint32 offset;
    uint32 i;

    GEL_TextOut("\n------------------------------------\n");
    GEL_TextOut(" VIM \n");
    GEL_TextOut("------------------------------------\n");

    GEL_TextOut("PID          = %x\n",,,,, VIM_RD(0x000));
    GEL_TextOut("INFO         = %x\n",,,,, VIM_RD(0x004));
    GEL_TextOut("PRIIRQ       = %x\n",,,,, VIM_RD(0x008));
    GEL_TextOut("PRIFIQ       = %x\n",,,,, VIM_RD(0x00c));
    GEL_TextOut("IRQGSTS      = %x\n",,,,, VIM_RD(0x010));
    GEL_TextOut("FIQGSTS      = %x\n",,,,, VIM_RD(0x014));
    GEL_TextOut("IRQVEC       = %x\n",,,,, VIM_RD(0x018));
    GEL_TextOut("FIQVEC       = %x\n",,,,, VIM_RD(0x01c));
    GEL_TextOut("ACTIRQ       = %x\n",,,,, VIM_RD(0x020));
    GEL_TextOut("ACTFIQ       = %x\n",,,,, VIM_RD(0x024));
    GEL_TextOut("DEDVEC       = %x\n",,,,, VIM_RD(0x058));

    offset = 0x400;
    for (i = 0; i < 32; i++)
    {
        show_group(offset, i);
        offset += 0x20;
    }
}

hotmenu cpsw_vim_print_all()
{
    vim();
    intr();
    vec();
}